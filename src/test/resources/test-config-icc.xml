<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/util
           http://www.springframework.org/schema/util/spring-util.xsd">

	<context:component-scan
		base-package="de.ids_mannheim.korap" />
	<context:annotation-config />

	<bean id="props"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<array>
				<value>file:./kustvakt-icc.conf</value>
				<value>classpath:kustvakt-icc.conf</value>
			</array>
		</property>
	</bean>

	<bean id="placeholders"
		class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<array>
				<value>classpath:test-jdbc.properties</value>
				<value>file:./data/jdbc.properties</value>
				<value>classpath:properties/hibernate.properties</value>
				<value>classpath:kustvakt-icc.conf</value>
				<value>file:./data/kustvakt-icc.conf</value>				
			</array>
		</property>
	</bean>


	<!-- props are injected from default-config.xml -->
	<bean id="kustvakt_config"
		class="de.ids_mannheim.korap.config.FullConfiguration">
		<constructor-arg name="properties" ref="props" />
	</bean>

	<bean id="dataSource"
		class="org.apache.commons.dbcp2.BasicDataSource" lazy-init="true">
		<!-- <property name="driverClassName" value="${jdbc.driverClassName}" /> -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxTotal" value="4" />
		<property name="maxIdle" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxWaitMillis" value="15000" />
		<!--<property name="poolPreparedStatements" value="true"/> -->
	</bean>

	<bean id="c3p0DataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxPoolSize" value="4" />
		<property name="minPoolSize" value="1" />
		<property name="maxStatements" value="1" />
		<property name="testConnectionOnCheckout" value="true" />
	</bean>

	<!-- to configure database for sqlite, mysql, etc. migrations -->
	<bean id="flywayConfig"
		class="org.flywaydb.core.api.configuration.ClassicConfiguration">
		<!-- drop existing tables and create new tables -->
		<property name="validateOnMigrate" value="true" />
		<property name="cleanOnValidationError" value="true" />
		<property name="baselineOnMigrate" value="false" />
		<property name="cleanDisabled" value="false" />
		<property name="locations"
			value="#{'${jdbc.schemaPath}'.split(',')}" />
		<property name="dataSource" ref="dataSource" />
		<property name="outOfOrder" value="true" />
	</bean>

	<bean id="flyway" class="org.flywaydb.core.Flyway"
		init-method="migrate">
		<constructor-arg ref="flywayConfig" />
	</bean>


	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<array>
				<value>de.ids_mannheim.korap.core.entity</value>
				<value>de.ids_mannheim.korap.entity</value>
				<value>de.ids_mannheim.korap.oauth2.entity</value>
			</array>
		</property>
		<property name="jpaVendorAdapter">
			<bean id="jpaVendorAdapter"
				class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="databasePlatform"
					value="${hibernate.dialect}" />
			</bean>
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}
				</prop>
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider}</prop>
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory}</prop>
				<prop key="hibernate.jdbc.time_zone">${hibernate.jdbc.time_zone}</prop>
				<!-- <prop key="net.sf.ehcache.configurationResourceName">classpath:ehcache.xml</prop> -->
			</props>
		</property>
	</bean>

	<tx:annotation-driven proxy-target-class="true"
		transaction-manager="transactionManager" />
	<bean id="transactionManager"
		class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory"
			ref="entityManagerFactory" />
	</bean>

	<bean id="transactionTemplate"
		class="org.springframework.transaction.support.TransactionTemplate">
		<constructor-arg ref="transactionManager" />
	</bean>

	<!-- Data access objects -->
	<bean id="adminDao" class="de.ids_mannheim.korap.dao.AdminDaoImpl" />
	<bean id="resourceDao"
		class="de.ids_mannheim.korap.dao.ResourceDao" />
	<bean id="accessScopeDao"
		class="de.ids_mannheim.korap.oauth2.dao.AccessScopeDao" />
	<bean id="authorizationDao"
		class="de.ids_mannheim.korap.oauth2.dao.CachedAuthorizationDaoImpl" />

	<!-- Services -->
	<bean id="scopeService"
		class="de.ids_mannheim.korap.oauth2.service.OAuth2ScopeServiceImpl" />

	<!-- <bean id="initializator"
		class="de.ids_mannheim.korap.init.Initializator"
		init-method="initTestWithoutAvailability">
	</bean>
 -->
	<!-- Krill -->
	<bean id="search_krill"
		class="de.ids_mannheim.korap.web.SearchKrill">
		<constructor-arg value="${krill.indexDir}" />
	</bean>

	<!-- Validator -->
	<bean id="validator"
		class="de.ids_mannheim.korap.validator.ApacheValidator" />

	<!-- URLValidator -->
	<bean id="redirectURIValidator"
		class="org.apache.commons.validator.routines.UrlValidator">
		<constructor-arg value="http,https" index="0" />
		<constructor-arg index="1" type="long"
			value="#{T(org.apache.commons.validator.routines.UrlValidator).ALLOW_LOCAL_URLS + 
		T(org.apache.commons.validator.routines.UrlValidator).NO_FRAGMENTS}" />
	</bean>
	<bean id="urlValidator"
		class="org.apache.commons.validator.routines.UrlValidator">
		<constructor-arg value="http,https" />
	</bean>

	<!-- Rewrite -->
	<bean id="foundryRewrite"
		class="de.ids_mannheim.korap.rewrite.FoundryRewrite" />
	<bean id="virtualCorpusRewrite"
		class="de.ids_mannheim.korap.rewrite.VirtualCorpusRewrite" />
	<bean id="queryReferenceRewrite"
		class="de.ids_mannheim.korap.rewrite.QueryReferenceRewrite" />
	<bean id="queryContextRewrite"
		class="de.ids_mannheim.korap.rewrite.QueryContextRewrite" />
		

	<util:list id="rewriteTasks"
		value-type="de.ids_mannheim.korap.rewrite.RewriteTask">
		<ref bean="foundryRewrite" />
		<ref bean="virtualCorpusRewrite" />
		<ref bean="queryReferenceRewrite" />
		<ref bean="queryContextRewrite" />
	</util:list>

	<bean id="rewriteHandler"
		class="de.ids_mannheim.korap.rewrite.RewriteHandler">
		<constructor-arg ref="rewriteTasks" />
	</bean>

	<util:list id="statisticsRewriteTasks"
		value-type="de.ids_mannheim.korap.rewrite.RewriteTask">
		<ref bean="foundryRewrite" />
		<ref bean="virtualCorpusRewrite" />
		<ref bean="queryReferenceRewrite" />
	</util:list>
	
	<bean id="statisticsRewriteHandler"
		class="de.ids_mannheim.korap.rewrite.RewriteHandler">
		<constructor-arg ref="statisticsRewriteTasks" />
	</bean>
	
	<bean id="kustvaktResponseHandler"
		class="de.ids_mannheim.korap.web.KustvaktResponseHandler">
	</bean>

	<!-- OAuth -->
	<bean id="oauth2ResponseHandler"
		class="de.ids_mannheim.korap.web.OAuth2ResponseHandler">
	</bean>

	<bean name="kustvakt_encryption"
		class="de.ids_mannheim.korap.encryption.KustvaktEncryption">
		<constructor-arg ref="kustvakt_config" />
	</bean>

	<!-- authentication providers to use -->
	<bean id="basic_auth"
		class="de.ids_mannheim.korap.authentication.BasicAuthentication" />

	<bean id="oauth2_auth"
		class="de.ids_mannheim.korap.authentication.OAuth2Authentication" />


	<util:list id="kustvakt_authproviders"
		value-type="de.ids_mannheim.korap.interfaces.AuthenticationIface">
		<ref bean="basic_auth" />
		<ref bean="oauth2_auth" />
	</util:list>


	<!-- specify type for constructor argument -->
	<bean id="authenticationManager"
		class="de.ids_mannheim.korap.authentication.KustvaktAuthenticationManager">
		<constructor-arg
			type="de.ids_mannheim.korap.interfaces.EncryptionIface"
			ref="kustvakt_encryption" />
		<constructor-arg ref="kustvakt_config" />
		<!-- inject authentication providers to use -->
		<property name="providers" ref="kustvakt_authproviders" />
	</bean>

	<!-- todo: if db interfaces not loaded via spring, does transaction even 
		work then? -->
	<!-- the transactional advice (i.e. what 'happens'; see the <aop:advisor/> 
		bean below) -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<!-- the transactional semantics... -->
		<tx:attributes>
			<!-- all methods starting with 'get' are read-only -->
			<tx:method name="get*" read-only="true"
				rollback-for="KorAPException" />
			<!-- other methods use the default transaction settings (see below) -->
			<tx:method name="*" rollback-for="KorAPException" />
		</tx:attributes>
	</tx:advice>

	<!-- ensure that the above transactional advice runs for any execution of 
		an operation defined by the service interface -->
	<aop:config>
		<aop:pointcut id="service"
			expression="execution(* de.ids_mannheim.korap.interfaces.db.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="service" />
	</aop:config>

	<!-- similarly, don't forget the PlatformTransactionManager -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

</beans>
