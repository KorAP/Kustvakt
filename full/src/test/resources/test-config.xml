<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-4.0.xsd
           http://www.springframework.org/schema/util
           http://www.springframework.org/schema/util/spring-util-4.0.xsd">

	<context:component-scan base-package="de.ids_mannheim.korap" />
	<context:annotation-config />

	<bean id="props"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<array>
				<value>classpath:kustvakt-test.conf</value>
				<value>file:./kustvakt-test.conf</value>
			</array>
		</property>
	</bean>

	<bean id="placeholders"
		class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<array>
				<value>classpath:test-jdbc.properties</value>
				<value>file:./test-jdbc.properties</value>
				<value>classpath:test-hibernate.properties</value>
				<value>classpath:kustvakt-test.conf</value>
			</array>
		</property>
	</bean>

	<bean id='cacheManager' class='org.springframework.cache.ehcache.EhCacheCacheManager'
		p:cacheManager-ref='ehcache' />

	<bean id='ehcache'
		class='org.springframework.cache.ehcache.EhCacheManagerFactoryBean'
		p:configLocation='classpath:ehcache.xml' p:shared='true' />

	<!-- props are injected from default-config.xml -->
	<bean id="kustvakt_config" class="de.ids_mannheim.korap.config.KustvaktConfiguration">
		<constructor-arg name="properties" ref="props" />
	</bean>

	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		lazy-init="true">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxTotal" value="4" />
		<property name="maxIdle" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxWaitMillis" value="15000" />
		<!--<property name="poolPreparedStatements" value="true"/> -->
	</bean>

	<!-- use SingleConnection only for testing! -->
	<bean id="sqliteDataSource"
		class="org.springframework.jdbc.datasource.SingleConnectionDataSource"
		lazy-init="true">
		<!-- <property name="driverClassName" value="${jdbc.driverClassName}" /> -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- Sqlite can only have a single connection -->
		<property name="suppressClose">
			<value>true</value>
		</property>
	</bean>
	
	<bean id="c3p0DataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
	    destroy-method="close">
	    <property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	    <property name="maxPoolSize" value="4" />
	    <property name="minPoolSize" value="1" />
	    <property name="maxStatements" value="1" />
	    <property name="testConnectionOnCheckout" value="true" />
	</bean>

	<!-- to configure database for sqlite, mysql, etc. migrations -->
	<bean id="flyway" class="org.flywaydb.core.Flyway" init-method="migrate">
		<!-- drop existing tables and create new tables -->
		<property name="validateOnMigrate" value="true" />
		<property name="cleanOnValidationError" value="true" />

		<property name="baselineOnMigrate" value="false" />
		<property name="locations" value="${jdbc.schemaPath}" />
		<property name="dataSource" ref="sqliteDataSource" />
		<!-- <property name="dataSource" ref="dataSource" /> -->
	</bean>

	<bean id="kustvakt_db" class="de.ids_mannheim.korap.handlers.JDBCClient">
		<!-- <constructor-arg index="0" ref="dataSource" /> -->
		<constructor-arg index="0" ref="sqliteDataSource" />
		<property name="database" value="${jdbc.database}" />
	</bean>

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<!-- <property name="dataSource" ref="dataSource" /> -->
		<property name="dataSource" ref="sqliteDataSource" />
		<property name="packagesToScan" value="de.ids_mannheim.korap.entity" />
		<property name="jpaVendorAdapter">
			<bean id="jpaVendorAdapter"
				class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="databasePlatform" value="${hibernate.dialect}" />
			</bean>
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}
				</prop>
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider}</prop>
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory}</prop>
				<!-- <prop key="net.sf.ehcache.configurationResourceName">classpath:ehcache.xml</prop> -->
			</props>
		</property>
	</bean>

	<tx:annotation-driven proxy-target-class="true"
		transaction-manager="transactionManager" />
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<bean id="transactionTemplate"
		class="org.springframework.transaction.support.TransactionTemplate">
		<constructor-arg ref="transactionManager" />
	</bean>

	<!-- Data access objects -->
	<bean id="resourceDao" class="de.ids_mannheim.korap.dao.ResourceDao"/>
	<!-- <bean id="annotationDao" class="de.ids_mannheim.korap.dao.AnnotationDao"/> -->

	<!-- Krill -->
	<bean id="search_krill" class="de.ids_mannheim.korap.web.SearchKrill">
		<constructor-arg value="${krill.indexDir}"/>
	</bean>

	<bean id="kustvakt_auditing" class="de.ids_mannheim.korap.handlers.JDBCAuditing">
		<constructor-arg ref="kustvakt_db" />
	</bean>
	
	<bean id="kustvakt_response"
          class="de.ids_mannheim.korap.web.utils.KustvaktResponseHandler">
          <constructor-arg index="0" name="iface" ref="kustvakt_auditing"/>
    </bean>

	<bean id="kustvakt_userdb" class="de.ids_mannheim.korap.handlers.EntityDao">
		<constructor-arg ref="kustvakt_db" />
	</bean>

	<bean id="kustvakt_admindb" class="de.ids_mannheim.korap.handlers.AdminDao">
		<constructor-arg ref="kustvakt_db" />
	</bean>

	<bean id="resource_provider" class="de.ids_mannheim.korap.handlers.ResourceDao">
		<constructor-arg ref="kustvakt_db" />
	</bean>

	<bean id="document_provider" class="de.ids_mannheim.korap.handlers.DocumentDao">
		<constructor-arg ref="kustvakt_db" />
	</bean>

	<bean id="kustvakt_policies" class="de.ids_mannheim.korap.security.ac.PolicyDao">
		<constructor-arg ref="kustvakt_db" />
	</bean>

	<bean name="kustvakt_encryption"
		class="de.ids_mannheim.korap.interfaces.defaults.KustvaktEncryption">
		<constructor-arg ref="kustvakt_config" />
	</bean>

	<!-- authentication providers to use -->
	<!-- <bean id="api_auth" class="de.ids_mannheim.korap.authentication.APIAuthentication">
		<constructor-arg type="de.ids_mannheim.korap.config.KustvaktConfiguration"
			ref="kustvakt_config" />
	</bean> -->
	<bean id="ldap_auth" class="de.ids_mannheim.korap.authentication.LdapAuth3">
		<constructor-arg type="de.ids_mannheim.korap.config.KustvaktConfiguration"
			ref="kustvakt_config" />
	</bean>
	
	<bean id="openid_auth"
		class="de.ids_mannheim.korap.authentication.OpenIDconnectAuthentication">
		<constructor-arg type="de.ids_mannheim.korap.config.KustvaktConfiguration"
			ref="kustvakt_config" />
		<constructor-arg
			type="de.ids_mannheim.korap.interfaces.db.PersistenceClient" ref="kustvakt_db" />
	</bean>

	<bean id="basic_auth" class="de.ids_mannheim.korap.authentication.BasicHttpAuth" />


	<bean id="session_auth"
		class="de.ids_mannheim.korap.authentication.SessionAuthentication">
		<constructor-arg type="de.ids_mannheim.korap.config.KustvaktConfiguration"
			ref="kustvakt_config" />
		<constructor-arg type="de.ids_mannheim.korap.interfaces.EncryptionIface"
			ref="kustvakt_encryption" />
	</bean>

	<util:list id="kustvakt_authproviders"
		value-type="de.ids_mannheim.korap.interfaces.AuthenticationIface">
		<ref bean="basic_auth" />
		<ref bean="ldap_auth" />
		<ref bean="session_auth" />
		<!-- <ref bean="api_auth" /> -->
		<ref bean="openid_auth" />
	</util:list>


	<bean id="userdata_details" class="de.ids_mannheim.korap.handlers.UserDetailsDao">
		<constructor-arg ref="kustvakt_db" />
	</bean>

	<bean id="userdata_settings" class="de.ids_mannheim.korap.handlers.UserSettingsDao">
		<constructor-arg ref="kustvakt_db" />
	</bean>

	<util:list id="kustvakt_userdata"
		value-type="de.ids_mannheim.korap.interfaces.db.UserdataDbIface">
		<ref bean="userdata_details" />
		<ref bean="userdata_settings" />
	</util:list>

	<util:list id="kustvakt_resources"
		value-type="de.ids_mannheim.korap.interfaces.db.ResourceOperationIface">
		<ref bean="document_provider" />
		<ref bean="resource_provider" />
	</util:list>

	<!-- specify type for constructor argument -->
	<bean id="kustvakt_authenticationmanager"
		class="de.ids_mannheim.korap.authentication.KustvaktAuthenticationManager">
		<constructor-arg
			type="de.ids_mannheim.korap.interfaces.db.EntityHandlerIface" ref="kustvakt_userdb" />
		<constructor-arg
			type="de.ids_mannheim.korap.interfaces.db.AdminHandlerIface" ref="kustvakt_admindb" />
		<constructor-arg type="de.ids_mannheim.korap.interfaces.EncryptionIface"
			ref="kustvakt_encryption" />
		<constructor-arg ref="kustvakt_config" />
		<constructor-arg type="de.ids_mannheim.korap.interfaces.db.AuditingIface"
			ref="kustvakt_auditing" />
		<constructor-arg ref="kustvakt_userdata" />
		<!-- inject authentication providers to use -->
		<property name="providers" ref="kustvakt_authproviders" />
	</bean>

	<!-- todo: if db interfaces not loaded via spring, does transaction even 
		work then? -->
	<!-- the transactional advice (i.e. what 'happens'; see the <aop:advisor/> 
		bean below) -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<!-- the transactional semantics... -->
		<tx:attributes>
			<!-- all methods starting with 'get' are read-only -->
			<tx:method name="get*" read-only="true" rollback-for="KorAPException" />
			<!-- other methods use the default transaction settings (see below) -->
			<tx:method name="*" rollback-for="KorAPException" />
		</tx:attributes>
	</tx:advice>

	<!-- ensure that the above transactional advice runs for any execution of 
		an operation defined by the service interface -->
	<aop:config>
		<aop:pointcut id="service"
			expression="execution(* de.ids_mannheim.korap.interfaces.db.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="service" />
	</aop:config>

	<!-- similarly, don't forget the PlatformTransactionManager -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
</beans>